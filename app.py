import streamlit as st
import pandas as pd
from jinja2 import Template
import base64
import re
import io
import unicodedata
import openpyxl

st.set_page_config(page_title="B√°o c√°o k·∫øt qu·∫£ ƒë√†o t·∫°o - VIAGS", layout="wide")

st.title("üìã Qu·∫£n l√Ω l·ªõp h·ªçc - VIAGS")

# H√†m chu·∫©n h√≥a th·ªùi gian
def chuan_hoa_thoi_gian(time_str):
    # 26-27/5/2025 -> 26,27/5/2025
    match = re.match(r"(\d{1,2})-(\d{1,2})/(\d{1,2}/\d{4})", str(time_str))
    if match:
        ngay1, ngay2, thangnam = match.groups()
        return f"{ngay1},{ngay2}/{thangnam}"
    return str(time_str).strip()

# H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát v√† chu·∫©n h√≥a chu·ªói
def remove_vietnamese_accents(s):
    if not isinstance(s, str):
        return ""
    s = unicodedata.normalize('NFD', s)
    s = s.encode('ascii', 'ignore').decode('utf-8')
    s = s.replace(' ', '').lower()
    return s

def normalize_name(s):
    s = str(s) if s is not None else ""
    s = s.split('-')[0].strip()
    # B·ªï sung thay th·∫ø ƒê/ƒë th√†nh D/d
    s = s.replace('ƒê', 'D').replace('ƒë', 'd')
    import unicodedata, re
    s = unicodedata.normalize('NFD', s)
    s = ''.join(c for c in s if unicodedata.category(c) != 'Mn')
    s = re.sub(r'\s+', '', s)
    s = s.lower()
    return s


def strip_accents(s):
    if not isinstance(s, str):
        return ""
    s = unicodedata.normalize('NFD', s)
    s = s.replace('ƒê', 'D').replace('ƒë', 'd')
    return ''.join(c for c in s if unicodedata.category(c) != 'Mn')


# ========== Qu·∫£n l√Ω nhi·ªÅu l·ªõp ==========
if "danh_sach_lop" not in st.session_state:
    st.session_state["danh_sach_lop"] = {}
if "ten_lop_hien_tai" not in st.session_state:
    st.session_state["ten_lop_hien_tai"] = ""
if "hien_nhap_excel" not in st.session_state:
    st.session_state["hien_nhap_excel"] = False

# S·∫Øp x·∫øp danh s√°ch l·ªõp theo th·ª© t·ª± ti·∫øng Vi·ªát

ds_lop = sorted(list(st.session_state["danh_sach_lop"].keys()), key=strip_accents)

chuc_nang = st.columns([5, 2, 2, 3])
with chuc_nang[0]:
    ten_lop = st.selectbox(
        "üóÇÔ∏è Ch·ªçn l·ªõp",
        ds_lop + ["+ T·∫°o l·ªõp m·ªõi"],
        index=ds_lop.index(st.session_state["ten_lop_hien_tai"]) if st.session_state["ten_lop_hien_tai"] in ds_lop else len(ds_lop),
    )
with chuc_nang[1]:
    ten_moi = st.text_input("T√™n l·ªõp m·ªõi", value="", placeholder="VD: ATHK 01/2025")
    tao_lop = st.button("‚ûï T·∫°o l·ªõp m·ªõi")
with chuc_nang[2]:
    if ds_lop and st.button("üóëÔ∏è X√≥a l·ªõp ƒëang ch·ªçn"):
        if st.session_state["ten_lop_hien_tai"] in st.session_state["danh_sach_lop"]:
            del st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]
            st.session_state["ten_lop_hien_tai"] = ds_lop[0] if ds_lop else ""
with chuc_nang[3]:
    if st.button("üì• Nh·∫≠p nhi·ªÅu l·ªõp t·ª´ Excel", key="open_excel_modal"):
        st.session_state["hien_nhap_excel"] = True


# Hi·ªÉn th·ªã kh·ªëi nh·∫≠p file Excel khi b·∫•m n√∫t (gi·∫£ popup)
if st.session_state.get("hien_nhap_excel", False):
    with st.expander("üì• Nh·∫≠p nhi·ªÅu l·ªõp t·ª´ file Excel (m·ªói sheet 1 l·ªõp)", expanded=True):
        file_excel = st.file_uploader(
            "Ch·ªçn file Excel danh s√°ch l·ªõp",
            type=["xlsx"],
            key="multi_class_uploader_import"
        )
        col_excel = st.columns([2, 1])
        with col_excel[0]:
            nhap_excel = st.button("Nh·∫≠p c√°c l·ªõp v√†o h·ªá th·ªëng", key="btn_nhap_excel")
        with col_excel[1]:
            huy_excel = st.button("‚ùå ƒê√≥ng nh·∫≠p nhi·ªÅu l·ªõp", key="btn_huy_excel")
        # X·ª≠ l√Ω nh·∫≠p v√† ƒë√≥ng form
        if huy_excel:
            st.session_state["hien_nhap_excel"] = False
            st.rerun()

    if file_excel is not None and nhap_excel:
        wb = openpyxl.load_workbook(file_excel, data_only=True)
        so_lop_them = 0
        lop_moi_vua_them = None
        log_sheets = []

        for sheetname in wb.sheetnames:
            sheet_check = remove_vietnamese_accents(sheetname)
            if sheet_check == "mucluc":
                log_sheets.append(f"‚è© B·ªè qua sheet '{sheetname}' (M·ª•c l·ª•c).")
                continue

            ws = wb[sheetname]
            ten_lop_goc = ws["D7"].value
            if not ten_lop_goc or str(ten_lop_goc).strip() == "":
                log_sheets.append(f"‚ùå Sheet '{sheetname}': Thi·∫øu t√™n l·ªõp ·ªü D7.")
                continue

            thoi_gian = ws["D9"].value or ""
            thoi_gian_chuan = chuan_hoa_thoi_gian(thoi_gian)
            # T·∫°o t√™n l·ªõp nh∆∞ code b·ªë ƒëang d√πng
            ten_lop = f"{str(ten_lop_goc).strip()}_{str(thoi_gian).strip()}"
            orig_ten_lop = ten_lop
            cnt = 1
            while ten_lop in st.session_state["danh_sach_lop"]:
                ten_lop = f"{orig_ten_lop}_{cnt}"
                cnt += 1

            # Lo·∫°i h√¨nh/h√¨nh th·ª©c ƒë√†o t·∫°o
            loai_hinh_full = ws["B8"].value or ""
            if ":" in str(loai_hinh_full):
                loai_hinh = str(loai_hinh_full).split(":", 1)[-1].strip()
            else:
                loai_hinh = str(loai_hinh_full).strip()
            dia_diem = ws["D10"].value or ""

            # ƒê·ªçc danh s√°ch h·ªçc vi√™n t·ª´ d√≤ng 14 tr·ªü ƒëi (C14 - M√£ NV, D14 - H·ªç t√™n, E14 - ƒê∆°n v·ªã)
            data = []
            row = 14
            while True:
                ma_nv = ws[f"C{row}"].value
                ho_ten = ws[f"D{row}"].value
                don_vi = ws[f"E{row}"].value
                # N·∫øu c·∫£ 3 √¥ ƒë·ªÅu tr·ªëng th√¨ d·ª´ng
                if (not ma_nv or str(ma_nv).strip() == "") and (not ho_ten or str(ho_ten).strip() == ""):
                    break
                # N·∫øu 1 trong c√°c √¥ ch·ª©a t·ª´ kh√≥a "Tr∆∞·ªüng", "Trung t√¢m", "K√Ω t√™n" th√¨ d·ª´ng
                if any((
                    (isinstance(ma_nv, str) and ("tr∆∞·ªüng" in ma_nv.lower() or "trung t√¢m" in ma_nv.lower() or "k√Ω t√™n" in ma_nv.lower())),
                    (isinstance(ho_ten, str) and ("tr∆∞·ªüng" in ho_ten.lower() or "trung t√¢m" in ho_ten.lower() or "k√Ω t√™n" in ho_ten.lower())),
                    (isinstance(don_vi, str) and ("tr∆∞·ªüng" in don_vi.lower() or "trung t√¢m" in don_vi.lower() or "k√Ω t√™n" in don_vi.lower()))
                )):
                    break
                if (ma_nv and str(ma_nv).strip() != "") or (ho_ten and str(ho_ten).strip() != ""):
                    data.append({
                        "M√£ NV": str(ma_nv or "").strip(),
                        "H·ªç t√™n": str(ho_ten or "").strip(),
                        "ƒê∆°n v·ªã": str(don_vi or "").strip(),
                        "ƒêi·ªÉm": ""
                    })
                row += 1


            if len(data) > 0:
                df = pd.DataFrame(data)
                st.session_state["danh_sach_lop"][ten_lop] = {
                    "class_info": {
                        "course_name": ten_lop_goc,
                        "training_type": loai_hinh,
                        "time": thoi_gian_chuan,
                        "location": dia_diem,
                        "num_attended": "",
                        "num_total": "",
                    },
                    "ds_hocvien": df
                }
                lop_moi_vua_them = ten_lop
                so_lop_them += 1
                log_sheets.append(f"‚úÖ Sheet '{sheetname}' ({ten_lop_goc}) ƒë√£ nh·∫≠p {len(data)} h·ªçc vi√™n (t√™n l·ªõp: {ten_lop})")
            else:
                log_sheets.append(f"‚ùå Sheet '{sheetname}': Kh√¥ng c√≥ h·ªçc vi√™n ·ªü C14-E14 tr·ªü ƒëi.")

        if so_lop_them:
            st.session_state["ten_lop_hien_tai"] = lop_moi_vua_them
                # RESET bi·∫øn t·∫°m v·ªÅ ƒë√∫ng l·ªõp v·ª´a nh·∫≠p cu·ªëi c√πng
            cur_lop_data = st.session_state["danh_sach_lop"][lop_moi_vua_them]
            st.session_state["class_info_tmp"] = cur_lop_data.get("class_info", {}).copy()
            st.session_state["ds_hocvien_tmp"] = cur_lop_data.get("ds_hocvien", pd.DataFrame()).copy()
            st.session_state["diem_tmp"] = cur_lop_data.get("ds_hocvien", pd.DataFrame()).copy()
            st.success(f"ƒê√£ nh·∫≠p xong {so_lop_them} l·ªõp! V√†o ph·∫ßn 'Ch·ªçn l·ªõp' ƒë·ªÉ ki·ªÉm tra.")
            for log in log_sheets:
                st.write(log)
            st.session_state["hien_nhap_excel"] = False
            st.rerun()
        else:
            for log in log_sheets:
                st.write(log)
            st.warning("Kh√¥ng t√¨m th·∫•y sheet n√†o h·ª£p l·ªá (ph·∫£i c√≥ D7 l√† t√™n l·ªõp v√† h·ªçc vi√™n t·ª´ C14-E14).")

# X·ª≠ l√Ω t·∫°o l·ªõp m·ªõi
if tao_lop and ten_moi.strip():
    if ten_moi not in st.session_state["danh_sach_lop"]:
        st.session_state["danh_sach_lop"][ten_moi] = {
            "class_info": {
                "course_name": "",
                "training_type": "",
                "time": "",
                "location": "", 
                "num_attended": "",
                "num_total": "",
            },
            "ds_hocvien": pd.DataFrame({
                "M√£ NV": [""] * 30,
                "H·ªç t√™n": [""] * 30,
                "ƒê∆°n v·ªã": [""] * 30,
                "ƒêi·ªÉm": [""] * 30
            }),
        }
        st.session_state["ten_lop_hien_tai"] = ten_moi

        # RESET c√°c bi·∫øn t·∫°m cho l·ªõp m·ªõi t·∫°o
        cur_lop_data = st.session_state["danh_sach_lop"][ten_moi]
        st.session_state["class_info_tmp"] = cur_lop_data.get("class_info", {}).copy()
        st.session_state["ds_hocvien_tmp"] = cur_lop_data.get("ds_hocvien", pd.DataFrame()).copy()
        st.session_state["diem_tmp"] = cur_lop_data.get("ds_hocvien", pd.DataFrame()).copy()

        st.rerun()
    else:
        st.warning("T√™n l·ªõp ƒë√£ t·ªìn t·∫°i!")
elif ten_lop and ten_lop != "+ T·∫°o l·ªõp m·ªõi":
    st.session_state["ten_lop_hien_tai"] = ten_lop
    # RESET c√°c bi·∫øn t·∫°m theo l·ªõp m·ªõi ch·ªçn
    cur_lop_data = st.session_state["danh_sach_lop"][ten_lop]
    st.session_state["class_info_tmp"] = cur_lop_data.get("class_info", {}).copy()
    st.session_state["ds_hocvien_tmp"] = cur_lop_data.get("ds_hocvien", pd.DataFrame()).copy()
    st.session_state["diem_tmp"] = cur_lop_data.get("ds_hocvien", pd.DataFrame()).copy()

# N·∫øu ch∆∞a c√≥ l·ªõp n√†o, y√™u c·∫ßu t·∫°o tr∆∞·ªõc
if not st.session_state["ten_lop_hien_tai"]:
    st.info("üîî H√£y t·∫°o l·ªõp m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠p li·ªáu v√† qu·∫£n l√Ω!")
    st.stop()

# L·∫•y d·ªØ li·ªáu l·ªõp hi·ªán t·∫°i
lop_data = st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]
class_info = lop_data.get("class_info", {})
ds_hocvien = lop_data.get("ds_hocvien", pd.DataFrame({
    "M√£ NV": [""] * 30,
    "H·ªç t√™n": [""] * 30,
    "ƒê∆°n v·ªã": [""] * 30,
    "ƒêi·ªÉm": [""] * 30
}))

# ==== Chu·∫©n b·ªã bi·∫øn t·∫°m cho c∆° ch·∫ø l∆∞u khi chuy·ªÉn tab ====
if "active_tab" not in st.session_state:
    st.session_state["active_tab"] = "1Ô∏è‚É£ Th√¥ng tin l·ªõp h·ªçc"

if "ds_hocvien_tmp" not in st.session_state:
    st.session_state["ds_hocvien_tmp"] = ds_hocvien.copy()
if "diem_tmp" not in st.session_state:
    st.session_state["diem_tmp"] = ds_hocvien.copy()

def save_data_when_switch_tab(new_tab):
    
    # Tab 1: L∆∞u th√¥ng tin l·ªõp h·ªçc khi chuy·ªÉn tab
    if st.session_state["active_tab"] == "1Ô∏è‚É£ Th√¥ng tin l·ªõp h·ªçc" and new_tab != "1Ô∏è‚É£ Th√¥ng tin l·ªõp h·ªçc":
        st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["class_info"] = st.session_state["class_info_tmp"].copy()# Tab 2: L∆∞u danh s√°ch h·ªçc vi√™n (kh√¥ng ƒëi·ªÉm)
    if st.session_state["active_tab"] == "2Ô∏è‚É£ Danh s√°ch h·ªçc vi√™n" and new_tab != "2Ô∏è‚É£ Danh s√°ch h·ªçc vi√™n":
        ds = st.session_state["ds_hocvien_tmp"].copy()
        # N·∫øu ƒëang c√≥ c·ªôt ƒëi·ªÉm th√¨ reset, n·∫øu kh√¥ng th√¨ th√¥i (ho·∫∑c gi·ªØ l·∫°i, t√πy b·ªë mu·ªën)
        for col in ["ƒêi·ªÉm LT", "ƒêi·ªÉm TH"]:
            if col in ds.columns:
                ds = ds.drop(columns=[col])
        # Reset l·∫°i ƒëi·ªÉm khi danh s√°ch thay ƒë·ªïi
        ds["ƒêi·ªÉm LT"] = ""
        ds["ƒêi·ªÉm TH"] = ""
        st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["ds_hocvien"] = ds.copy()
    # Tab 3: L∆∞u ƒëi·ªÉm
    if st.session_state["active_tab"] == "3Ô∏è‚É£ C·∫≠p nh·∫≠t ƒëi·ªÉm" and new_tab != "3Ô∏è‚É£ C·∫≠p nh·∫≠t ƒëi·ªÉm":
        st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["ds_hocvien"] = st.session_state["diem_tmp"].copy()
    st.session_state["active_tab"] = new_tab

# ========= Tabs =========
tab1, tab2, tab3, tab4 = st.tabs([
    "1Ô∏è‚É£ Th√¥ng tin l·ªõp h·ªçc", 
    "2Ô∏è‚É£ Danh s√°ch h·ªçc vi√™n",
    "3Ô∏è‚É£ C·∫≠p nh·∫≠t ƒëi·ªÉm",
    "4Ô∏è‚É£ Ch·ªØ k√Ω & xu·∫•t b√°o c√°o"
])
# ========== Tab n·ªôi dung ==========

    
with tab1:
    save_data_when_switch_tab("1Ô∏è‚É£ Th√¥ng tin l·ªõp h·ªçc")
    st.subheader("Nh·∫≠p th√¥ng tin l·ªõp h·ªçc")
    class_info_sample = '''An to√†n h√†ng kh√¥ng
ƒê·ªãnh k·ª≥/Elearning+Tr·ª±c ti·∫øp
02/01/2025
TTƒêT MB
VNBA25-ƒêKVH04'''
    # L·∫•y d·ªØ li·ªáu t·ª´ bi·∫øn t·∫°m, n·∫øu ch∆∞a c√≥ th√¨ copy t·ª´ d·ªØ li·ªáu g·ªëc
    if st.session_state["active_tab"] != "1Ô∏è‚É£ Th√¥ng tin l·ªõp h·ªçc":
        st.session_state["class_info_tmp"] = st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["class_info"].copy()

    class_info_tmp = st.session_state["class_info_tmp"]
    class_info_input = st.text_area(
        "D√°n v√†o 5 d√≤ng g·ªìm: M√¥n h·ªçc, Lo·∫°i h√¨nh, Th·ªùi gian, ƒê·ªãa ƒëi·ªÉm, [M√£ l·ªõp/ghi ch√∫ n·∫øu c√≥]", 
        value="\n".join([
            class_info_tmp.get("course_name", ""),
            class_info_tmp.get("training_type", ""),
            class_info_tmp.get("time", ""),
            class_info_tmp.get("location", ""),
            class_info_tmp.get("class_code", "")
        ]) if any(class_info_tmp.values()) else class_info_sample, height=130
    )

    class_info_lines = class_info_input.strip().split("\n")
    course_name = class_info_lines[0] if len(class_info_lines) > 0 else ""
    training_type = class_info_lines[1] if len(class_info_lines) > 1 else ""
    time = class_info_lines[2] if len(class_info_lines) > 2 else ""
    location = class_info_lines[3] if len(class_info_lines) > 3 else ""
    class_code_note = class_info_lines[4].strip() if len(class_info_lines) > 4 else ""

    st.session_state["class_info_tmp"] = {
        "course_name": course_name,
        "training_type": training_type,
        "time": time,
        "location": location,
        "class_code": class_code_note,
    }
    st.info("Th√¥ng tin s·∫Ω ƒë∆∞·ª£c l∆∞u khi chuy·ªÉn sang tab kh√°c.")


with tab2:
    save_data_when_switch_tab("2Ô∏è‚É£ Danh s√°ch h·ªçc vi√™n")
    st.subheader("Danh s√°ch h·ªçc vi√™n")
    st.caption("üìå D√°n ho·∫∑c nh·∫≠p danh s√°ch h·ªçc vi√™n, ch·ªâ ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n ·ªü ƒë√¢y (KH√îNG nh·∫≠p ƒëi·ªÉm ·ªü tab n√†y).")

    # Kh·ªüi t·∫°o l·∫°i bi·∫øn t·∫°m n·∫øu v·ª´a chuy·ªÉn sang tab ho·∫∑c danh s√°ch h·ªçc vi√™n t·∫°m b·ªã r·ªóng
    if st.session_state["active_tab"] != "2Ô∏è‚É£ Danh s√°ch h·ªçc vi√™n" or st.session_state["ds_hocvien_tmp"].empty:
        ds_hocvien_tmp = st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["ds_hocvien"].copy()
        # Lo·∫°i b·ªè c√°c c·ªôt ƒëi·ªÉm n·∫øu c√≥ (ƒë·∫£m b·∫£o tab 2 ch·ªâ qu·∫£n l√Ω th√¥ng tin c√° nh√¢n)
        for col in ["ƒêi·ªÉm LT", "ƒêi·ªÉm TH"]:
            if col in ds_hocvien_tmp.columns:
                ds_hocvien_tmp = ds_hocvien_tmp.drop(columns=[col])
        st.session_state["ds_hocvien_tmp"] = ds_hocvien_tmp.copy()

    ds_hocvien_tmp = st.session_state["ds_hocvien_tmp"]

    # ƒê·∫£m b·∫£o ƒë·ªß 3 c·ªôt
    for col in ["M√£ NV", "H·ªç t√™n", "ƒê∆°n v·ªã"]:
        if col not in ds_hocvien_tmp.columns:
            ds_hocvien_tmp[col] = ""

    ds_hocvien_tmp = ds_hocvien_tmp[["M√£ NV", "H·ªç t√™n", "ƒê∆°n v·ªã"]]

    ds_hocvien_tmp_new = st.data_editor(
        ds_hocvien_tmp,
        num_rows="dynamic",
        hide_index=False,
        use_container_width=True,
        column_order=["M√£ NV", "H·ªç t√™n", "ƒê∆°n v·ªã"],
        column_config={
            "M√£ NV": st.column_config.TextColumn(width="x-small"),
            "H·ªç t√™n": st.column_config.TextColumn(width="large"),
            "ƒê∆°n v·ªã": st.column_config.TextColumn(width="medium"),
        },
        key="data_editor_ds"
    )

    # Lu√¥n l∆∞u v√†o bi·∫øn t·∫°m, KH√îNG ghi session_state ch√≠nh cho ƒë·∫øn khi chuy·ªÉn tab!
    st.session_state["ds_hocvien_tmp"] = ds_hocvien_tmp_new.copy()

    st.info("M·ªçi thay ƒë·ªïi s·∫Ω ƒë∆∞·ª£c l∆∞u khi chuy·ªÉn sang tab kh√°c.")


with tab3:
    save_data_when_switch_tab("3Ô∏è‚É£ C·∫≠p nh·∫≠t ƒëi·ªÉm")
    st.subheader("Nh·∫≠p ƒëi·ªÉm (t·ª´ file ho·∫∑c nh·∫≠p tay)")
    # LU√îN l·∫•y data m·ªõi nh·∫•t
    ds_hocvien = st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["ds_hocvien"].copy()
    st.session_state["diem_tmp"] = ds_hocvien.copy()
    ds_hocvien = st.session_state["diem_tmp"]

    if ds_hocvien.empty or "H·ªç t√™n" not in ds_hocvien.columns:
        st.error("‚ùå Ch∆∞a c√≥ danh s√°ch h·ªçc vi√™n. Vui l√≤ng nh·∫≠p ·ªü tab 2 tr∆∞·ªõc.")
        st.stop()

    # Upload file ƒëi·ªÉm t·ª± ƒë·ªông GH√âP
    st.markdown("**T·∫£i file ƒëi·ªÉm d·∫°ng LMS ho·∫∑c ƒê·ª£t thi ƒë·ªÉ GH√âP t·ª± ƒë·ªông v√†o c·ªôt ƒêi·ªÉm LT:**")
    uploaded_lms = st.file_uploader("üì• File ƒëi·ªÉm LMS", type=["xlsx"], key="uploader_lms_tab3")
    uploaded_dotthi = st.file_uploader("üì• File ƒëi·ªÉm ƒê·ª£t thi", type=["xlsx"], key="uploader_dotthi_tab3")

    if uploaded_lms is not None:
        df_diem = pd.read_excel(uploaded_lms)
        col_name_hoten = df_diem.columns[3]
        col_name_lanthi = df_diem.columns[6]
        df_diem["HoTenChuan"] = df_diem[col_name_hoten].apply(normalize_name)
        def extract_diem_lanthi(text):
            if not isinstance(text, str):
                return ""
            scores = re.findall(r"L·∫ßn \d+\s*:\s*(\d+)", text)
            return "/".join(scores)
        df_diem["DiemDaXuLy"] = df_diem[col_name_lanthi].apply(extract_diem_lanthi)
        diem_map = dict(zip(df_diem["HoTenChuan"], df_diem["DiemDaXuLy"]))
        matched = 0
        ds_hocvien["HoTenChuan"] = ds_hocvien["H·ªç t√™n"].apply(normalize_name)
        for i, row in ds_hocvien.iterrows():
            key = row["HoTenChuan"]
            if key in diem_map and diem_map[key]:
                ds_hocvien.at[i, "ƒêi·ªÉm LT"] = diem_map[key]
                matched += 1
        ds_hocvien = ds_hocvien.drop(columns=["HoTenChuan"])
        if matched > 0:
            st.success(f"‚úÖ ƒê√£ gh√©p ƒëi·ªÉm LT cho {matched} h·ªçc vi√™n.")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng gh√©p ƒë∆∞·ª£c ƒëi·ªÉm. H√£y ki·ªÉm tra l·∫°i t√™n h·ªçc vi√™n.")
        st.session_state["diem_tmp"] = ds_hocvien.copy()

    if uploaded_dotthi is not None:
        df_dotthi = pd.read_excel(uploaded_dotthi)
        col_name_hoten = df_dotthi.columns[2]
        col_name_diem_1lan = df_dotthi.columns[4]
        col_name_diem_nlan = df_dotthi.columns[6]
        def extract_score_dotthi(row):
            diem_1lan = row[col_name_diem_1lan]
            diem_nlan = row[col_name_diem_nlan]
            if pd.notnull(diem_nlan) and str(diem_nlan).strip() != "":
                scores = re.findall(r"L·∫ßn\s*\d+\s*:\s*(\d+)", str(diem_nlan))
                return "/".join(scores) if scores else str(diem_nlan).strip()
            elif pd.notnull(diem_1lan) and str(diem_1lan).strip() != "":
                return str(diem_1lan).strip()
            return ""
        df_dotthi["HoTenChuan"] = df_dotthi[col_name_hoten].apply(normalize_name)
        df_dotthi["DiemDaXuLy"] = df_dotthi.apply(extract_score_dotthi, axis=1)
        diem_map = dict(zip(df_dotthi["HoTenChuan"], df_dotthi["DiemDaXuLy"]))
        matched = 0
        ds_hocvien["HoTenChuan"] = ds_hocvien["H·ªç t√™n"].apply(normalize_name)
        for i, row in ds_hocvien.iterrows():
            key = row["HoTenChuan"]
            if key in diem_map and diem_map[key]:
                ds_hocvien.at[i, "ƒêi·ªÉm LT"] = diem_map[key]
                matched += 1
        ds_hocvien = ds_hocvien.drop(columns=["HoTenChuan"])
        if matched > 0:
            st.success(f"‚úÖ ƒê√£ gh√©p ƒëi·ªÉm LT cho {matched} h·ªçc vi√™n.")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng gh√©p ƒë∆∞·ª£c ƒëi·ªÉm.")
        st.session_state["diem_tmp"] = ds_hocvien.copy()

    # ƒê·∫¢M B·∫¢O ƒë·ªß 2 c·ªôt "ƒêi·ªÉm LT", "ƒêi·ªÉm TH" tr∆∞·ªõc khi hi·ªÉn th·ªã data_editor
    for col in ["ƒêi·ªÉm LT", "ƒêi·ªÉm TH"]:
        if col not in ds_hocvien.columns:
            ds_hocvien[col] = ""

    # Hi·ªÉn th·ªã v√† cho ph√©p NH·∫¨P/S·ª¨A tr·ª±c ti·∫øp ƒëi·ªÉm LT, TH (KH√îNG cho s·ª≠a danh t√≠nh)
    st.markdown("**Ho·∫∑c nh·∫≠p ƒëi·ªÉm LT, ƒëi·ªÉm TH tr·ª±c ti·∫øp:**")
    cols_show = ["M√£ NV", "H·ªç t√™n", "ƒê∆°n v·ªã", "ƒêi·ªÉm LT", "ƒêi·ªÉm TH"]
    ds_hocvien_edit = st.data_editor(
        ds_hocvien[cols_show],
        num_rows="fixed",
        hide_index=False,
        use_container_width=True,
        column_order=cols_show,
        disabled=["M√£ NV", "H·ªç t√™n", "ƒê∆°n v·ªã"],
        key="diem_editor_tab3"
    )

    # C·∫≠p nh·∫≠t ƒëi·ªÉm v√†o bi·∫øn t·∫°m
    for col in ["ƒêi·ªÉm LT", "ƒêi·ªÉm TH"]:
        ds_hocvien[col] = ds_hocvien_edit[col]
    st.session_state["diem_tmp"] = ds_hocvien.copy()

    st.info("M·ªçi thay ƒë·ªïi ƒëi·ªÉm s·∫Ω ƒë∆∞·ª£c l∆∞u khi chuy·ªÉn sang tab kh√°c.")

with tab4:
    save_data_when_switch_tab("4Ô∏è‚É£ Ch·ªØ k√Ω & xu·∫•t b√°o c√°o")
    st.subheader("Th√¥ng tin ch·ªØ k√Ω b√°o c√°o & Xu·∫•t b√°o c√°o")

    # L·∫•y danh s√°ch h·ªçc vi√™n t·ª´ ƒë√∫ng l·ªõp ƒëang ch·ªçn
    ds_hocvien = st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]["ds_hocvien"].copy()

    gv_huong_dan = st.text_input("H·ªç t√™n Gi√°o vi√™n h∆∞·ªõng d·∫´n", value="Nguy·ªÖn ƒê·ª©c Nghƒ©a")
    truong_bo_mon = st.text_input("H·ªç t√™n Tr∆∞·ªüng b·ªô m√¥n", value="Ng√¥ Trung Th√†nh")
    truong_tt = st.text_input("H·ªç t√™n Tr∆∞·ªüng TTƒêT", value="Nguy·ªÖn Ch√≠ Ki√™n")

    # L·∫•y th√¥ng tin l·ªõp
    lop_data = st.session_state["danh_sach_lop"][st.session_state["ten_lop_hien_tai"]]
    class_info = lop_data["class_info"]
    course_name = class_info.get("course_name", "")
    training_type = class_info.get("training_type", "")
    time = class_info.get("time", "")
    location = class_info.get("location", "")
    num_attended = class_info.get("num_attended", "")
    num_total = class_info.get("num_total", "")

    def extract_days(time_str):
        if not time_str:
            return []
        time_str = time_str.replace('S', '').replace('s', '')
        match = re.search(r'([\d,]+)/(\d{1,2})/(\d{4})', time_str)
        if match:
            days = [d.strip() for d in match.group(1).split(',')]
            month = match.group(2)
            return [f"{d}/{month}" for d in days if d]
        match = re.search(r'(\d{1,2})/(\d{1,2})/(\d{4})', time_str)
        if match:
            return [f"{match.group(1)}/{match.group(2)}"]
        return []

    def ma_hoa_ten_lop(course_name, time_str):
        #M√£ h√≥a t√™n l·ªõp th√†nh t√™n ng·∫Øn g·ªçn (v√≠ d·ª•: YTCN_040625)
        from datetime import datetime
        words = re.findall(r'\w+', str(course_name))
        initials = ''.join([w[0].upper() for w in words])[:10]
        s = str(time_str)
        match = re.match(r'(\d{1,2})[, -](\d{1,2})/(\d{1,2})/(\d{4})', s)
        if match:
            dd1 = match.group(1).zfill(2)
            dd2 = match.group(2).zfill(2)
            mm = match.group(3).zfill(2)
            yy = match.group(4)[-2:]
            time_part = f"{dd1}{dd2}{mm}{yy}"
        else:
            match2 = re.match(r'(\d{1,2})[, -](\d{1,2})/(\d{1,2})$', s)
            if match2:
                dd1 = match2.group(1).zfill(2)
                dd2 = match2.group(2).zfill(2)
                mm = match2.group(3).zfill(2)
                yy = str(datetime.now().year)[-2:]
                time_part = f"{dd1}{dd2}{mm}{yy}"
            else:
                match3 = re.match(r'(\d{1,2})/(\d{1,2})/(\d{4})', s)
                if match3:
                    dd = match3.group(1).zfill(2)
                    mm = match3.group(2).zfill(2)
                    yy = match3.group(3)[-2:]
                    time_part = f"{dd}{mm}{yy}"
                else:
                    nums = re.findall(r'\d+', s)
                    if len(nums) >= 4:
                        dd1 = nums[0].zfill(2)
                        dd2 = nums[2].zfill(2)
                        mm = nums[-2].zfill(2)
                        yy = nums[-1][-2:]
                        time_part = f"{dd1}{dd2}{mm}{yy}"
                    elif len(nums) == 3:
                        dd = nums[0].zfill(2)
                        mm = nums[1].zfill(2)
                        yy = nums[2][-2:]
                        time_part = f"{dd}{mm}{yy}"
                    else:
                        time_part = "000000"
        return f"{initials}_{time_part}"

    with open("logo_viags.png", "rb") as image_file:
        logo_base64 = base64.b64encode(image_file.read()).decode()

    col1, col2, _ = st.columns([1, 1, 4])
    with col1:
        bckq = st.button("üìÑIn b√°o c√°o k·∫øt qu·∫£")
    with col2:
        diem_danh = st.button("T·∫°o b·∫£ng ƒëi·ªÉm danh")

    if bckq:
        if ds_hocvien.empty:
            st.warning("Vui l√≤ng nh·∫≠p danh s√°ch h·ªçc vi√™n!")
        else:
            ds_hocvien_filtered = ds_hocvien[
                (ds_hocvien["M√£ NV"].astype(str).str.strip() != "") | (ds_hocvien["H·ªç t√™n"].astype(str).str.strip() != "")]
            data = []

            diem_lt_nonempty = ds_hocvien_filtered["ƒêi·ªÉm LT"].astype(str).str.strip().replace("-", "").replace("nan", "").replace("None", "").ne("").sum()
            diem_th_nonempty = ds_hocvien_filtered["ƒêi·ªÉm TH"].astype(str).str.strip().replace("-", "").replace("nan", "").replace("None", "").ne("").sum()
            use_5b = diem_lt_nonempty > 0 and diem_th_nonempty > 0
            template_file = "report_template_5b.html" if use_5b else "report_template_5a.html"

            for i, row in ds_hocvien_filtered.iterrows():
                ma_nv = str(row.get("M√£ NV", "") or "").strip()
                ho_ten = str(row.get("H·ªç t√™n", "") or "").strip()
                if (not ma_nv or ma_nv.lower() == "none") and (not ho_ten or ho_ten.lower() == "none"):
                    continue

                diem_lt = str(row.get("ƒêi·ªÉm LT", "") or "").strip()
                diem_th = str(row.get("ƒêi·ªÉm TH", "") or "").strip()

                if use_5b:
                    diem_lt = diem_lt if diem_lt not in ["", "nan", "None", None] else "-"
                    diem_th = diem_th if diem_th not in ["", "nan", "None", None] else "-"

                    def get_last_score(s):
                        if s in ["", "-", "nan", "None", None]:
                            return 0
                        parts = [p.strip() for p in str(s).replace(",", ".").split("/") if p.strip().replace(".", "", 1).isdigit()]
                        return float(parts[-1]) if parts else 0

                    d_lt = get_last_score(diem_lt)
                    d_th = get_last_score(diem_th)
                    try:
                        diem_tb = round((d_lt + 2 * d_th) / 3)
                    except:
                        diem_tb = 0

                    scores_lt = [s for s in str(diem_lt).split("/") if s.strip().isdigit()]
                    scores_th = [s for s in str(diem_th).split("/") if s.strip().isdigit()]
                    num_tests = max(len(scores_lt), len(scores_th))
                    # X·∫øp lo·∫°i: >1 l·∫ßn ch·ªâ "ƒê·∫°t" n·∫øu >=80, kh√¥ng c√≥ "Xu·∫•t s·∫Øc"
                    if diem_lt == "-" and diem_th == "-":
                        xep_loai = "-"
                    elif num_tests > 1:
                        xep_loai = "ƒê·∫°t" if diem_tb >= 80 else "Kh√¥ng ƒë·∫°t"
                    else:
                        if diem_tb >= 95:
                            xep_loai = "Xu·∫•t s·∫Øc"
                        elif diem_tb >= 80:
                            xep_loai = "ƒê·∫°t"
                        else:
                            xep_loai = "Kh√¥ng ƒë·∫°t"
                    # Ghi ch√∫
                    if diem_lt == "-" and diem_th == "-":
                        note = "V·∫Øng"
                    else:
                        note = ""
                        main_scores = scores_lt if len(scores_lt) > 1 else scores_th
                        if len(main_scores) > 1:
                            note = f"Ki·ªÉm tra l·∫ßn {'/'.join(str(i+1) for i in range(len(main_scores)))}"
                    data.append({
                        "id": ma_nv,
                        "name": ho_ten,
                        "unit": str(row.get("ƒê∆°n v·ªã", "") or "").strip(),
                        "score_lt": diem_lt,
                        "score_th": diem_th,
                        "score_tb": diem_tb,
                        "rank": xep_loai,
                        "note": note,
                        "num_tests": num_tests
                    })
                else:
                    if diem_lt and diem_lt not in ["", "-", "nan", "None", None]:
                        diem_chinh = diem_lt
                    elif diem_th and diem_th not in ["", "-", "nan", "None", None]:
                        diem_chinh = diem_th
                    else:
                        diem_chinh = "-"
                    try:
                        parts = [p.strip() for p in str(diem_chinh).replace(",", ".").split("/") if p.strip().replace(".", "", 1).isdigit()]
                        diem_num = float(parts[-1]) if parts else 0
                    except:
                        diem_num = 0
                    scores = [s for s in str(diem_chinh).split("/") if s.strip().isdigit()]
                    num_tests = len(scores)
                    if diem_chinh in ["", "nan", "None", None]:
                        diem_chinh = "-"
                    if diem_chinh == "-":
                        xep_loai = "-"
                    elif num_tests > 1:
                        xep_loai = "ƒê·∫°t" if diem_num >= 80 else "Kh√¥ng ƒë·∫°t"
                    else:
                        if diem_num >= 95:
                            xep_loai = "Xu·∫•t s·∫Øc"
                        elif diem_num >= 80:
                            xep_loai = "ƒê·∫°t"
                        elif diem_num > 0:
                            xep_loai = "Kh√¥ng ƒë·∫°t"
                        else:
                            xep_loai = "-"
                    # Ghi ch√∫
                    if diem_chinh == "-":
                        note = "V·∫Øng"
                    else:
                        if num_tests > 1:
                            note = f"Ki·ªÉm tra l·∫ßn {'/'.join(str(i+1) for i in range(num_tests))}"
                        else:
                            note = ""
                    data.append({
                        "id": ma_nv,
                        "name": ho_ten,
                        "unit": str(row.get("ƒê∆°n v·ªã", "") or "").strip(),
                        "score": diem_chinh,
                        "rank": xep_loai,
                        "note": note,
                        "num_tests": num_tests
                    })

            # S·∫Øp x·∫øp
            def calc_group_numtests_score1(student):
                if "score_tb" in student:
                    try:
                        score_1 = float(student.get("score_tb", 0))
                    except:
                        score_1 = 0
                    num_tests = student.get("num_tests", 1)
                    if student.get("score_lt", "-") == "-" and student.get("score_th", "-") == "-":
                        group = 6
                    elif num_tests == 1:
                        if score_1 >= 95:
                            group = 1
                        elif score_1 >= 80:
                            group = 2
                        else:
                            group = 4
                    else:
                        if score_1 >= 80:
                            group = 3
                        else:
                            group = 5
                else:
                    try:
                        score_1 = float(student.get("score", 0))
                    except:
                        score_1 = 0
                    num_tests = student.get("num_tests", 1)
                    if student.get("score", "-") in ["", "-", "nan", "None", None]:
                        group = 6
                    elif num_tests == 1:
                        if score_1 >= 95:
                            group = 1
                        elif score_1 >= 80:
                            group = 2
                        else:
                            group = 4
                    else:
                        if score_1 >= 80:
                            group = 3
                        else:
                            group = 5
                return group, num_tests, score_1

            for student in data:
                group, num_tests, score_1 = calc_group_numtests_score1(student)
                student["group"] = group
                student["num_tests"] = num_tests
                student["score_1"] = score_1

            data_sorted = sorted(
                data,
                key=lambda row: (
                    row["group"],
                    row["num_tests"],
                    -row["score_1"],
                    row["name"]
                )
            )

            # T√≠nh l·∫°i s·ªë l∆∞·ª£ng n·∫øu ch∆∞a c√≥
            if not num_attended or not num_total:
                num_total = len(data_sorted)
                if use_5b:
                    num_attended = sum(1 for x in data_sorted if str(x.get("score_lt", "") or "").strip() not in ["", "-", "nan", "None"] or str(x.get("score_th", "") or "").strip() not in ["", "-", "nan", "None"])
                else:
                    num_attended = sum(1 for x in data_sorted if str(x.get("score", "") or "").strip() not in ["", "-", "nan", "None"])

            # X·ª≠ l√Ω ng√†y
            days = extract_days(time)
            for i, student in enumerate(data_sorted):
                student["day1"] = days[0] if len(days) > 0 else ""
                student["day2"] = days[1] if len(days) > 1 else ""
                student["day3"] = days[2] if len(days) > 2 else ""

            with open(template_file, "r", encoding="utf-8") as f:
                template_str = f.read()
            template = Template(template_str)
            min_height = 120 if len(data_sorted) <= 14 else 90

            rendered = template.render(
                students=data_sorted,
                course_name=course_name,
                training_type=training_type,
                time=time,
                location=location,
                num_attended=num_attended,
                num_total=num_total,
                class_code=class_info.get("class_code", ""),
                gv_huong_dan=gv_huong_dan,
                truong_bo_mon=truong_bo_mon,
                truong_tt=truong_tt,
                logo_base64=logo_base64,
                min_height=min_height
            )

            # Xu·∫•t Excel ƒë√∫ng t√™n m√£ h√≥a
            file_basename = ma_hoa_ten_lop(course_name, time)
            file_excel = f"{file_basename}.xlsx"
            df_baocao = pd.DataFrame(data_sorted)
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df_baocao.to_excel(writer, index=False, sheet_name="B√°o c√°o")
            output.seek(0)
            excel_b64 = base64.b64encode(output.read()).decode()

            html_report = f"""
            <div style="text-align:right; margin-bottom:12px;" class="no-print">
                <a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{excel_b64}"
                download="{file_excel}"
                style="display:inline-block; font-size:18px; padding:6px 18px; margin-right:16px; background:#f0f0f0; border-radius:4px; text-decoration:none; border:1px solid #ccc;">
                üì• T·∫£i b√°o c√°o Excel
                </a>
                <button onclick="window.print()" style="font-size:18px;padding:6px 18px;">üñ®Ô∏è In b√°o c√°o k·∫øt qu·∫£</button>
            </div>
            {rendered}
            """
            st.subheader("üìÑ Xem tr∆∞·ªõc b√°o c√°o")
            st.components.v1.html(html_report, height=1200, scrolling=True)

    # N·∫øu c√≥ n√∫t ƒëi·ªÉm danh, t·∫°o b·∫£ng ƒëi·ªÉm danh
    if diem_danh:
        df = ds_hocvien[(ds_hocvien["M√£ NV"].astype(str).str.strip() != "") | (ds_hocvien["H·ªç t√™n"].astype(str).str.strip() != "")]
        df = df.reset_index(drop=True)
        days = extract_days(time)
        students = []
        for i, row in df.iterrows():
            diem_lt = str(row.get("ƒêi·ªÉm LT", "") or "").strip()
            check = "X" if diem_lt and diem_lt not in ["", "-", "None"] else "V"
            students.append({
                "stt": i + 1,
                "id": str(row.get("M√£ NV", "") or "").strip(),
                "name": str(row.get("H·ªç t√™n", "") or "").strip(),
                "unit": str(row.get("ƒê∆°n v·ªã", "") or "").strip(),
                "day1": check if len(days) > 0 else "",
                "day2": check if len(days) > 1 else "",
                "day3": check if len(days) > 2 else "",
                "note": ""
            })
        students = [s for s in students if s["id"] or s["name"]]
        num_attended = sum(
            1 for s in students if "X" in [s.get("day1", ""), s.get("day2", ""), s.get("day3", "")]
        )
        with open("attendance_template.html", "r", encoding="utf-8") as f:
            template_str = f.read()
        template = Template(template_str)
        attendance_html = template.render(
            students=students,
            course_name=course_name,
            training_type=training_type,
            time=time,
            location=location,
            num_total=len(students),
            num_attended=num_attended,
            class_code=class_info.get("class_code", ""),
            gv_huong_dan=gv_huong_dan,
            days=days,
            logo_base64=logo_base64,
            min_height=120 if len(students) <= 14 else 90
        )
        attendance_html_with_print = """
        <div style="text-align:right; margin-bottom:12px;" class="no-print">
            <button onclick="window.print()" style="font-size:18px;padding:6px 18px;">üñ®Ô∏è In b·∫£ng ƒëi·ªÉm danh</button>
        </div>
        """ + attendance_html
        st.components.v1.html(attendance_html_with_print, height=1000, scrolling=True)


